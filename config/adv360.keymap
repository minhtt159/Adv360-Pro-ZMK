/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LAYKP   1
#define LAYFN   2
#define LAYMOD  3
#define LAYHM   4
#define HYPER     LS(LC(LA(LCMD)))
#define MEH       LS(LC(LALT))
#define SHIFT_REV LS(LCTRL)

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1       &kp N2      &kp N3      &kp N4       &kp N5  &tog LAYKP                                                                     &mo LAYMOD  &kp N6  &kp N7       &kp N8      &kp N9      &kp N0          &kp MINUS
&kp TAB    &kp Q        &kp W       &kp E       &kp R        &kp T   &none                                                                          &none       &kp Y   &kp U        &kp I       &kp O       &kp P           &kp BSLH
&kp ESC    &hm LCTRL A  &hm LALT S  &hm LCMD D  &hm LSHFT F  &kp G   &none       &kp LCMD  &kp LALT                    &kp RCTRL      &hm RCMD ESC  &to LAYHM   &kp H   &hm RSHFT J  &hm RCMD K  &hm RALT L  &hm RCTRL SEMI  &kp SQT
&kp LSHFT  &kp Z        &kp X       &kp C       &kp V        &kp B                         &hm LS(LC(LALT)) LC(B)      &kp RG(LSHFT)                            &kp N   &kp M        &kp COMMA   &kp DOT     &kp FSLH        &kp RSHFT
&mo LAYFN  &kp GRAVE    &kp CAPS    &kp LEFT    &kp RIGHT            &kp SPACE   &kp BSPC  &kp LS(LA(LC(LCMD)))        &kp LA(LSHFT)  &kp ENTER     &kp SPACE           &kp UP       &kp DOWN    &kp LBKT    &kp RBKT        &mo LAYFN
            >;
        };

        layer_keypad {
            bindings = <
&trans  &kp C_PLAY_PAUSE  &kp F10  &kp F11  &kp F12  &trans  &trans                                      &trans     &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &kp C_VOL_UP      &kp F7   &kp F8   &kp F9   &trans  &trans                                      &trans     &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&trans  &kp C_VOL_DN      &kp F4   &kp F5   &kp F6   &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&trans  &kp K_MUTE        &kp F1   &kp F2   &kp F3   &trans                  &trans      &trans                     &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans  &trans            &trans   &trans   &trans           &trans  &trans  &trans      &trans  &trans  &kp KP_N0          &trans      &trans        &trans         &kp KP_DOT       &trans
            >;
        };

        layer_fn {
            bindings = <
&trans    &kp GRAVE  &kp LPAR   &kp RPAR   &kp SEMI  &kp COMMA  &trans                                      &trans  &trans    &trans     &trans     &trans    &trans    &trans
&kp EXCL  &kp LBRC   &kp SQT    &kp DQT    &kp RBRC  &kp QMARK  &trans                                      &trans  &kp SEMI  &kp LPAR   &kp RPAR   &kp LBKT  &kp RBKT  &trans
&kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR  &kp STAR   &trans  &trans  &trans      &trans  &trans  &trans  &kp DOT   &kp COLON  &kp EQUAL  &kp GT    &kp SEMI  &trans
&kp AT    &kp LT     &kp PIPE   &kp MINUS  &kp GT    &kp FSLH                   &trans      &trans                  &kp STAR  &kp BSLH   &kp COMMA  &kp DOT   &kp FSLH  &trans
&trans    &trans     &trans     &trans     &trans               &trans  &trans  &trans      &trans  &trans  &trans            &trans     &trans     &trans    &trans    &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none           &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none           &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &macro_ver    &macro_kinesis  &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                         &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_hm {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans       &trans  &trans  &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans       &trans  &trans  &trans  &trans  &trans    &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans  &trans  &trans  &trans      &trans  &trans  &to DEFAULT  &trans  &kp J   &kp K   &kp L   &kp SEMI  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                       &trans  &trans  &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans               &trans  &trans  &trans  &trans    &trans
            >;
        };
    };
};
